class InvalidArgumentType(Exception):
	"""
	Исключение: неверный тип аргумента.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Value: str, Type: str):
		"""
		Исключение: неверный тип аргумента.
		"""

		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Value + "\" isn't \"" + Type + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 
			
	# Преобразователь: представляет содержимое класса как строку.
	def __str__(self):
		return self.__Message

class MutuallyExclusiveFlags(Exception):
	"""
	Исключение: активированы взаимоисключающие флаги.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str):
		"""
		Исключение: активированы взаимоисключающие флаги.
		"""

		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Command + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 
			
	# Преобразователь: представляет содержимое класса как строку.
	def __str__(self):
		return self.__Message

class MutuallyExclusiveKeys(Exception):
	"""
	Исключение: активированы взаимоисключающие ключи.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str):
		"""
		Исключение: активированы взаимоисключающие ключи.
		"""

		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Command + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 
		
			
	# Преобразователь: представляет содержимое класса как строку.
	def __str__(self):
		return self.__Message
	
class MutuallyExclusivePositions(Exception):
	"""
	Исключение: активированы разные позиции на одном слое.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str): 
		"""
		Исключение: активированы разные позиции на одном слое.
		"""

		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Command + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 
		
			
	# Преобразователь: представляет содержимое класса как строку.
	def __str__(self):
		return self.__Message

class NotEnoughArguments(Exception):
	"""
	Исключение: недостаточно аргументов.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str):
		"""
		Исключение: недостаточно аргументов.
		"""

		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Command + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 

	# Информатор: вызывается при выводе исключения в консоль.
	def __str__(self):
		return self.__Message

class TooManyArguments(Exception):
	"""
	Исключение: слишком много аргументов.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str):
		"""
		Исключение: слишком много аргументов.
		"""

		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Command + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 
			
	# Преобразователь: представляет содержимое класса как строку.
	def __str__(self):
		return self.__Message

class UnknownCommand(Exception):
	"""
	Исключение: неизвестная комманда.
	"""

	# Конструктор: вызывается при обработке исключения.
	def __init__(self, Command: str):
		"""
		Исключение: неизвестная комманда.
		"""
		
		# Добавление данных в сообщение об ошибке.
		self.__Message = "\"" + Command + "\"."
		# Обеспечение доступа к оригиналу наследованного свойства.
		super().__init__(self.__Message) 
		
			
	# Преобразователь: представляет содержимое класса как строку.
	def __str__(self):
		return self.__Message
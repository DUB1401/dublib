from .Methods import ReplaceRegexSubstring

import html
import re


class HTML:
    """Объектная реализация обработчика HTML."""

    def __init__(self, text: str = None):
        """
        Объектная реализация обработчика HTML.
            text – текст, подлежащий обработке.
        """

        # ---> Генерация динамических свойств.
        # ==========================================================================================#
        # Регулярное выражение фильтрации тегов HTML.
        self.__all_tags_regex = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')
        # Обрабатываемый текст.
        self.__text = text

    # ==========================================================================================#
    # >>>>> СВОЙСТВА ТОЛЬКО ДЛЯ ЧТЕНИЯ <<<<< #
    # ==========================================================================================#

    @property
    def plain_text(self) -> str:
        """Текст без тегов и спецсимволов HTML."""

        # Конвертирование спецсимволов HTML в Unicode.
        plaintext = html.unescape(self.__text)
        # Удаление найденных по регулярному выражению тегов.
        plaintext = str(re.sub(self.__all_tags_regex, "", plaintext))

        return plaintext

    @property
    def text(self) -> str:
        """Текст."""
        return self.__text

    # ==========================================================================================#
    # >>>>> МЕТОДЫ <<<<< #
    # ==========================================================================================#

    def __str__(self) -> str:
        return self.__text

    def remove_tags(self):
        """Удаляет все теги HTML из текста."""

        # Удаление найденных по регулярному выражению тегов.
        self.__text = str(re.sub(self.__all_tags_regex, "", self.__text))

    def unescape(self):
        """Преобразует спецсимволы HTML в Unicode."""

        # Конвертирование спецсимволов HTML в Unicode.
        self.__text = html.unescape(self.__text)


class Markdown:
    """Объектная реализация обработчика Markdown."""

    # ==========================================================================================#
    # >>>>> СВОЙСТВА ТОЛЬКО ДЛЯ ЧТЕНИЯ <<<<< #
    # ==========================================================================================#

    @property
    def escaped_text(self) -> str:
        """Текст с экранированными спецсимволами."""
        # Буфер текста.
        text = self.__text
        # Для каждого спецсимвола провести экранирование.
        for Character in self.__special_characters:
            text = ReplaceRegexSubstring(text, f"(?<!\\\\)\\{Character}", f"\\{Character}")

        return text

    @property
    def text(self) -> str:
        """Текст."""

        return self.__text

    # ==========================================================================================#
    # >>>>> МЕТОДЫ <<<<< #
    # ==========================================================================================#

    def __init__(self, text: str = None):
        """Объектная реализация обработчика Markdown.

        text – текст, подлежащий обработке.
        """

        # ---> Генерация динамических свойств.
        # ==========================================================================================#
        # Обрабатываемый текст.
        self.__text = str(text)
        # Список спецсимволов.
        self.__special_characters = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']

    def __str__(self) -> str:
        return self.__text

    def escape(self):
        """Экранирует спецсимволы."""

        # Для каждого спецсимвола провести экранирование.
        for Character in self.__special_characters:
            self.__text = ReplaceRegexSubstring(self.__text, f"(?<!\\\\)\\{Character}", f"\\{Character}")
